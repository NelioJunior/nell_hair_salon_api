
                 GUIA PARA CRIAÇÃO DE INSTRUÇÕES SQL NO BANCO DE DADOS MYSQL Salão de beleza

	O profissional DBA MYSQL para responder solicitaçoes do usuário: deve seguir os Exemplos SQL descritos neste documento.

	Este documento é organizado por tópicos e sub-tópicos, organizados através de linhas de textos sobre linhas de textos, 
	onde os sub-tópicos são reconhecidos por subníveis tabulados, parecido com a organização de um algoritmo Python

	No contexto deste documento, qualquer referencia a servico devera ser considerada especialidade, 
	sendo assim a tabela de servico na verdade tem o nome de especialidade.

	CARACTERISTICAS GERAL:

		O banco de dados foi projetado para gerenciar informações de um salao de beleza 
		e apresenta uma estrutura organizada para armazenar dados relacionados a clientes,
		funcionários, produtos, agendas e transações financeiras.

		Este banco de dados é utilizado pelo aplicativo MINI-ERP PARA SALOES DE BELEZA . 

	Criterios para criação de Instrucoes SQL 

		- Em pesquisa que envolve nomes, deverao ser feitas pelo campo nome e apelido, nos caso que estes campos 
		    existem na tabela em questao e utilizado a cláusula Like 'campo%'

				Exemplo SQL: 
					#user_request_or_question: "Por favor, eu preciso do telefone da profissional Nat"

					#SQL:  SELECT telefone  
							FROM funcionario 
							WHERE funcionario.nome LIKE 'Nat%' 
								OR funcionario.apelido LIKE 'Nat%'  
								AND ativo = 1;


		- Em pesquisas que envolvem busca atraves de campos tipo varchar como clausa desta busca (com exceção do campo nome),
		devera ser utilizado a cláusula Like '%campo%' 

			Exemplo SQL: 
				#user_request_or_question:	"Por favor, eu preciso do telefone da cliente Natasha"

				#SQL: SELECT telefone  FROM cliente  WHERE nome LIKE 'Natasha%' AND ativo = 1;  ;  

		- Em pesquisas que envolvem busca atraves de nome de produto dever  utilizado a cláusula Like '%campo%' 
			Exemplo SQL: 
				#user_request_or_question: "Qual é o fornecedor que distribui e vende o produto shampoo?"			
				#SQL: SELECT fornecedor.nome  FROM fornecedor 
							JOIN produto 
							ON fornecedor.id_fornecedor = produto.id_fornecedor  
							WHERE produto.nome LIKE 'shampoo%';
							AND fornecedor.ativo = 1
							AND produto.ativo = 1;


	Tabelas:

		Padrões de Nomenclatura:

			A maioria das tabelas utilizam nomes no singular, como campanha, cliente, produto.
			Os nomes seguem o padrão CamelCase para campos regulares, como nome, telefone, e padrão Snake Case para identificadores,
			como id_fornecedor, id_produto.


		Lista de tabelas do sistema 

			Estas sao as unicas tabelas do sistema.
			O profissional de DBA MYSQL nao deve pressupor outras tabelas no sistema que nao estejam na lista abaixo:

			Table "empresa" {
			"id_empresa" int [pk, increment]
			"nomeEmpresa" varchar(100) [not null]
			"telefone" varchar(20) [not null]
			"responsavel" varchar(200) [not null]
			"adesao" varchar(20) [not null]
			"nomeUsuario" varchar(50)
			"endereco" varchar(255) [not null]
			"cep" varchar(10) [not null]
			"email" varchar(100) [not null]
			"cnpj" varchar(18)
			"instagram" varchar(200)
			"nomeBot" varchar(100)
			"avatar" varchar(100)
			"horario" json [not null]
			"atenderNaoCadastrados" int [not null, default: true]
			"modalidade" varchar(20) [not null]
			"diaRemuneracao1" varchar(2) [not null, default: "01"]
			"percentagemRemuneracao1" int [not null, default: 0]
			"diaRemuneracao2" varchar(2) [default: "00"]
			"percentagemRemuneracao2" int [not null, default: 0]
			"percentagemRemuneracaoGeral" int [not null, default: 0]
			"semana" json [not null]
			"ativo" integer [default: 1]
			}

			Table "fornecedor" {
			"id_fornecedor" integer [pk, increment]
			"nome" varchar(50) [not null]
			"razaoSocial" varchar(100)
			"cnpjcpf" varchar(20)
			"responsabel" varchar(50)
			"email" varchar(40)
			"telefone" varchar(30)
			"celular" varchar(30)
			"site" varchar(40)
			"cep" varchar(10)
			"endereco" varchar(100)
			"bairro" varchar(40)
			"cidade" varchar(40)
			"estado" varchar(20)
			"observacao" varchar(200)
			"avatar" varchar(45)
			"ativo" integer [default: 1]
			}

			Table "produto" {
			"id_produto" integer [pk, increment]
			"nome" varchar(40) [not null]
			"codigobarras" varchar(40)
			"marca" varchar(40)
			"linha" varchar(10)
			"categoria" varchar(10)
			"descricao" varchar(100)
			"precoCompra" float [default: 0]
			"precoVenda" float [default: 0]
			"id_fornecedor" integer
			"prazoentrega" integer [default: 0]
			"tipovenda" integer [default: 1]
			"tipoconsumo" integer [default: 1]
			"evitarsaidanegativa" integer [default: 0]
			"estoqueatual" float [default: 0]
			"estoqueminimo" float [default: 0]
			"medida" varchar(10)
			"observacao" varchar(200)
			"avatar" varchar(45)
			"ativo" integer [default: 1]
			}

			Table "cliente" {
			"id_cliente" integer [pk, increment]
			"nome" varchar(50) [not null]
			"contato" varchar(50) [unique, not null]
			"telefone" varchar(30) [not null]
			"aniversario" datetime
			"genero" varchar(1) [default: "f"]
			"observacaoCli" text
			"avatar" varchar(45)
			"email" varchar(40)
			"enviarEmail" boolean [default: 0]
			"divulgacao" boolean [default: 1]
			"roboPodeAtender" boolean [default: 0]
			"roboPodeAgendar" boolean [default: 0]
			"ativo" integer [default: 1]
			}


			Table "especialidade" {
			"id_especialidade" integer [pk, increment]
			"nome" varchar(50) [not null]
			"palavrasChaves" varchar(200) [not null]
			"descricao" varchar(100)
			"avatar" varchar(45)
			"emoji" varchar(20)
			"preco" double [not null, default: 0]
			"sessoes" integer [not null, default: 1]
			"tempoNecessarioPorSessao" integer [default: 30]
			"ativo" boolean [default: 0]
			}

			Table "cargo" {
			"id_cargo" integer [pk, increment]
			"nome" varchar(50) [not null]
			"ativo" integer [default: 1]
			}

			Table "funcionario" {
			"id_funcionario" integer [pk, increment]
			"nome" varchar(50) [not null]
			"apelido" varchar(30) [default: ""]
			"id_cargo" integer
			"telefone" varchar(30)
			"cpfCnpj" varchar(14)
			"genero" varchar(1) [default: "f"]
			"id_banco" integer
			"entradaManha" varchar(5)
			"saidaManha" varchar(5)
			"entradaTarde" varchar(5)
			"saidaTarde" varchar(5)
			"entradaNoite" varchar(5)
			"saidaNoite" varchar(5)
			"contaCorrente" varchar(14)
			"modalidade" varchar(10) [default: ""]
			"diaRemuneracao1" varchar(10) [default: ""]
			"percentagemRemuneracao1" integer [default: 0]
			"diaRemuneracao2" varchar(10) [default: ""]
			"percentagemRemuneracao2" integer [default: 0]
			"percentagemRemuneracaoGeral" integer [default: 0]
			"remuneracaoFixa" float [default: 0]
			"domingo" tinyint(1)
			"segunda" tinyint(1)
			"terca" tinyint(1)
			"quarta" tinyint(1)
			"quinta" tinyint(1)
			"sexta" tinyint(1)
			"sabado" tinyint(1)
			"mes" tinyint(1) [default: true]
			"cor" varchar(7) [default: "white"]
			"avatar" varchar(45)
			"ativo" tinyint(1) [default: true]
			}

			Table "agenda" {
			"id_agenda" integer [pk, increment]
			"id_agenda_original" integer [not null, default: 0]
			"id_funcionario" integer [not null]
			"id_cliente" integer
			"dataHoraInicio" datetime [not null]
			"dataHoraFim" datetime [not null]
			"sessaoNumero" integer [not null, default: 1]
			"totalSessoes" integer [not null, default: 1]
			"totalPreco" double [not null, default: 0]
			"parcelarPrecoPorSessao" tinyint(1) [default: true]
			"enviado" boolean [default: 0]
			"ativo" tinyint(1) [default: true]
			}

			Table "agendaEspecialidade" {
			"id_agenda" integer [not null]
			"id_especialidade" integer [not null]
			}

			Table "funcionarioEspecialidade" {
			"id_especialidade" INTEGER [not null]
			"id_funcionario" INTEGER [not null]
			}

			Table "fluxoCaixa" {
			"id_fluxoCaixa" integer [pk, increment]
			"id_principal" integer
			"id_funcionario" integer
			"horaDataAbertura" datetime
			"horaDataFechamento" datetime
			"valorAbertura" float [default: 0]
			"valorFechamento" float [default: 0]
			"dataHora" datetime [not null]
			"valor" float [default: 0]
			"tipo" varchar(1) [default: "E"]
			"situacao" varchar(10) [default: "aberta"]
			"meioPgto" varchar(2) [default: "DI"]
			"diaPgtoCartao" integer [default: 1]
			"id_parcela" integer [default: 0]
			"parcelas" integer [default: 1]
			"observacao" varchar(200)
			"ativo" integer [default: true]
			}

			Table "fluxoCaixaItem" {
			"id_fluxoCaixaItem" integer [increment]
			"id_fluxoCaixa" integer
			"id_agenda" integer [default: 0]
			"id_cliente" integer [default: 0]
			"id_funcionario" integer [default: 0]
			"descricao" varchar(200) [not null]
			"id_produto" integer [default: 0]
			"quantidade" integer [default: 1]
			"valor" float [default: 0]

			}


			tabelas de associação  

				Existem as tabelas que fazerm a junção entre dias tabelas esseniciais do sitema, abaixo a lista:

					- funcionarioEspecialidade: junção entre as tabelas funcionario e especialidade
					- agendaEspecialidade: junção entre as tabelas agenda e especialidade
					- grupoCliente: junção entre as tabelas grupo e cliente 
					- fluxoCaixaItem: junção entre as tabelas fluxoCaixa e produto 
					- campanhaGrupo : junção entre as tabelas campanha e grupo 


		Regras para Instrucoes SQL nas Tabelas principais do sistema:

			empresa 

				Chefe, responsável pelo salão, e dono do salão são significados iguais a 'proprietário' do salão de beleza, 
				campo 'proprietário' dentro da tabela 'empresa'. 
				Informações administrativas do salão de beleza, como nome da empresa, nome do proprietário, dias de funcionamento 
				e dia de remuneração (dia de pagamento), estão contidas dentro da tabela 'empresa'.
				A coluna ativo controla  exclusao logida do registro, ou seja a ativação ou desativação do registro. 

			cliente:

				A tabela cliente é destinada ao gerenciamento de informações de clientes, oferecendo detalhes como nome, contato, 
				telefone e dados pessoais. O campo id_cliente atua como identificador único para cada registro. As colunas nome 
				e contato permitem pesquisas flexíveis utilizando o formato LIKE 'campo%'. 
				A coluna ativo controla  exclusao logida do registro, ou seja a ativação ou desativação do registro. 


			especialidade:

				A tabela especialidade é destinada ao gerenciamento de informações de serviços prestados pelo salão de beleza, 
				nesta tabela contem informacoes como descrição, precos, tempo necessario, sessoes necessarias para serem feitos os serviço. 
				A coluna ativo controla  exclusao logida do registro, ou seja a ativação ou desativação do registro. 

			funcionario:
			
				A tabela `funcionario` é projetada para gerenciar informações de funcionários, abrangendo detalhes pessoais. 
				Os campos `entradaManha`, `saidaManha`, `entradaTarde`, `saidaTarde`, `entradaNoite`, e `saidaNoite` 
				definem os horários de trabalho em diferentes períodos do dia. 
				A coluna ativo controla  exclusao logida do registro, ou seja a ativação ou desativação do registro. 
				
					campos de horario de entrada e saida do funcionario:

						+------------------+--------------+----------------------------------------------------------+
						| NOME DO CAMPO    | TIPO         | PREENCHIMENTO                                            |
						+------------------+--------------+----------------------------------------------------------+
						| entradaManha     | varchar(5)   | horario padrao 24 horas, podendo ser entre 00:00 e 11:59 |
						| saidaManha       | varchar(5)   | horario padrao 24 horas, podendo ser entre 00:00 e 11:59 |
						| entradaTarde     | varchar(5)   | horario padrao 24 horas, podendo ser entre 12:00 e 17:59 |
						| saidaTarde       | varchar(5)   | horario padrao 24 horas, podendo ser entre 12:00 e 17:59 |
						| entradaNoite     | varchar(5)   | horario padrao 24 horas, podendo ser entre 18:00 e 23:59 |
						| saidaNoite       | varchar(5)   | horario padrao 24 horas, podendo ser entre 18:00 e 23:59 |
						+------------------+--------------+----------------------------------------------------------+

				Remuneração do Funcionario 

					A remuneração do funcionario pode ser uma salario fixo mensal ou uma porcentagem sobre os servicos prestados. 
					Para saber o salario mensal de um funcionario, verificar entro da tabela funcionario se remuneracaoFixa = 0 retornar 
					campo percentagemRemuneracaoGeral + '% sobre o servico'   
					caso contrario se deve retornar o campo remuneracaoFixa, 
					isso claro com a filtragem campo nome ou apelido = "nome ou apelido".

					Exemplo SQL:
						#user_request_or_question:	"Qual é o salario do funcionario John Doe" ? 
						#SQL: SELECT nome, 
									apelido,
									CASE 
									WHEN remuneracaoFixa = 0 THEN 
										CONCAT(percentagemRemuneracaoGeral, '% sobre o serviço')
									ELSE CAST(remuneracaoFixa AS CHAR) 
									END AS remuneracao
								FROM 
									funcionario
								WHERE 
									nome LIKE 'John Doe%'
									OR apelido LIKE 'John Doe%'
									AND funcionario.ativo = 1;

				Nota  

					Muitas vez dentro do ambiente do salao, funcionario tambem pode ser chamado de colaborador, tecnico (no caso de beleza), 
					empregado. 
					Quando se pergunta se um funciorio possui um compromisso (ou um sinonimo disto), 
					na verdade se esta perguntando se o funcionario possui algum agendamento para ele prestar servico. 

		PRINCIPAIS TABELAS DO SISTEMA			
		
			agenda: 

				A tabela agenda destina-se a gerenciar compromissos, destacando a associação entre funcionários, clientes e detalhes das sessões. 
				O campo id_agenda atua como identificador único, enquanto id_agenda_original identifica modificações vinculadas ao registro original. 
				As chaves estrangeiras id_funcionario e id_cliente conectam-se às tabelas correspondentes, indicando os participantes do compromisso. 
				As colunas dataHoraInicio e dataHoraFim definem o intervalo temporal do compromisso, enquanto sessaoNumero e totalSessoes detalham a 
				sequência e o número total de sessões. O campo totalPreco registra o custo total do compromisso, com a opção de parcelamento por 
				sessão indicada por parcelarPrecoPorSessao. 
				A coluna enviado informa se o compromisso foi comunicado, possivelmente relacionado a notificações. 
				O status de ativação ou desativação do registro é refletido em ativo.
				Restrições de chave estrangeira garantem a integridade referencial com as tabelas cliente e funcionario. 
				Em suma, essa estrutura fornece uma base sólida para o agendamento, 
				permitindo a personalização de compromissos com diversos detalhes específicos.
				Quando o usuario pede para se fazer um agendamento para um cliente,
				isso significa a inserção na tabela agenda e tambem na tabela agendaEspecialidade para indicar quais servicos o cliente 
				esta solicitando.   
				A coluna ativo controla  exclusao logida do registro, ou seja a ativação ou desativação do registro.

			fluxoCaixa 

				A tabela fluxoCaixa é destinada a documentar eventos financeiros, 
				concentrando-se em registros ocorridos durante as aberturas e fechamentos de caixa,
				bem como transações individuais. 
				A coluna ativo controla  exclusao logida do registro, ou seja a ativação ou desativação do registro.


			produto:

				A tabela produto é destinada ao gerenciamento de produtos, abrangendo informações como nome, 
				código de barras, marca, linha, categoria e descrição. 
				As colunas precoCompra e precoVenda registram os valores de compra e venda, respectivamente. 
				A chave estrangeira id_fornecedor conecta-se à tabela fornecedor, 
				estabelecendo a relação entre produtos e seus fornecedores. 
				A coluna prazoentrega indica o prazo de entrega associado ao produto. 
				Os campos tipovenda e tipoconsumo oferecem flexibilidade para diferentes modalidades de venda e consumo. 
				Evitarsaidanegativa é um indicador para evitar saídas negativas do estoque. 
				As colunas estoqueatual e estoqueminimo monitoram os níveis de estoque. 
				Medida especifica a unidade de medida do produto. Observação permite notas adicionais. 
				A coluna avatar pode armazenar informações sobre a imagem associada ao produto. 
				Ativo controla a ativação ou desativação do registro. 
				Restrições de chave estrangeira garantem a integridade referencial com a tabela fornecedor. 
				Essa estrutura oferece uma abordagem abrangente para o gerenciamento de informações de produtos, 
				desde detalhes comerciais até características específicas de estoque e fornecimento.	
				A coluna ativo controla  exclusao logida do registro, ou seja a ativação ou desativação do registro.

				Para se localizar o fornecedor que distribui um determinado produto basta realizar 
				um join da tabela produto com  a tabela fornecedor.

						Exemplo SQL:
							#user_request_or_question: "Qual é o fornecedor que fornece, distribui , vende o produto shampoo?"
							#SQL: select fornecedor.nome  
										from produto inner join fornecedor
											on produto.id_fornecedor = fornecedor.id_fornecedor
										where produto.nome like 'shampoo%'
											AND fornecedor.ativo = 1
											AND produto.ativo = 1 ;   
			funcionario 
		
				Dentro deste sistema empregado, profissional, especialista, sao todos denominacao de funcionário

				Quando um usuário fizer uma pergunta sobre funcionário, e não especificar exatamente o campo que ele quer se informar, 
				informe o campo nome do funcionário.


    CONSULTAS DE FUNCIONARIOS COMPROMETIDOS COM AGENDAMENTOS 

		Em casos de dúvidas relacionadas ao funcionário que estará trabalhando em um agendamento, é recomendável realizar consultas 
		baseadas na relação entre a tabela "agenda" e a tabela "funcionario". Para filtrar com base em períodos de datas e horas, 
		considere o campo da tabela "agenda" denominado "dataHoraInicio".

		Exemplo SQL: 

			#user_request_or_question:  "Quais sao os profissionais que possuem agendamento para o dia 24 deste mes?"
			#SQL: SELECT f.nome funcionario 
						FROM funcionario f 
						JOIN agenda a ON f.id_funcionario = a.id_funcionario  
						WHERE DATE(a.dataHoraInicio) = '2024-01-24'
						AND f.ativo = 1;




	CONSULTAS DE AGENDAMENTO DE CLIENTES

		Em casos de questões relacionadas ao agendamento de clientes, recomenda-se realizar consultas baseadas no relacionamento 
		entre as tabelas "agenda" e "cliente". Para parâmetros baseados em períodos de datas e horas, considere o campo da tabela 
		"agenda" denominado "dataHoraInicio".

		Exemplo SQL: 
		
				"Quais sao os clientes que possuem agendamento marcados para o dia 17 deste mes?"
				#SQL: SELECT c.nome  
						FROM cliente c 
							JOIN agenda a ON c.id_cliente = a.id_cliente 
						WHERE DATE(a.dataHoraInicio) = '2024-01-17'
							AND c.ativo = 1;			

	CONSULTA DE FORNECEDORES DE PRODUTOS EM ESTOQUE 

		Todos os produtos mantidos em estoque estao descritos na tabela produto.
		Em casos em queira saber informacoes do fornecedor de um determinado produto é necessario fazer o relacionamento entre as duas 
		tabelas utilizando como campos de relacionamentos o id_fornecedor comum entre as duas tabelas. 

			Exemplo SQL "Qual o nome do fornecedor do produto com o nome 'protetor solar'?" 
			#SQL: SELECT f.nome 
					FROM fornecedor f
						JOIN produto p 
							ON f.id_fornecedor = p.id_fornecedor
					WHERE p.nome LIKE '%protetor solar%'
						AND f.ativo = 1 
						AND p.ativo = 1;


	CONSULTA DE PRODUTOS EM ESTOQUE

		Caso seja necessario saber a relacao de produtos mais vendidos, 
		isso e obtido com o relacionamento das tabela produto e fluxoCaixaItem.

			Exemplo SQL 1 
				Quais são os 5 produtos mais vendidos no salão? 
				#SQL:  SELECT 
							p.nome AS NomeProduto,
							COUNT(fc.id_fluxoCaixaItem) AS QuantidadeVendida
						FROM 
							produto p
						JOIN 
							fluxoCaixaItem fc ON p.id_produto = fc.id_produto
						WHERE 
							p.ativo = 1 	
						GROUP BY 
							p.nome
						ORDER BY 
							QuantidadeVendida DESC
						LIMIT 5;

			Exemplo SQL 2 
				Qual é a margem de lucro média dos produtos de beleza?			
				#SQL: SELECT AVG((precoVenda - precoCompra) / precoCompra) * 100 AS MargemLucroMedia
								FROM produto
								WHERE ativo = 1;


			Em consultas sobre saida de produtos em estoque, deve ser feito o relacionamento entre as tabelas fluxoCaixa, 
			fluxoCaixaItem e produto 
			e nestes casos é importante que o campo tipo da tabela fluxoCaixa seja igual a 'é,
			pois indica entrada de valor, logo houve uma venda de produto.

				Exemplo SQL 3 
					Quais são os itens de estoque com maior saída?	
					#SQL:  SELECT 
								p.nome AS NomeProduto,
								SUM(fc.quantidade) AS TotalSaida
							FROM 
								fluxoCaixaItem fc
							JOIN 
								produto p ON fc.id_produto = p.id_produto
							JOIN 
								fluxoCaixa f ON fc.id_fluxoCaixa = f.id_fluxoCaixa
							WHERE  
								f.tipo = 'e'   /* E = Entrada de dinheiro , logo saida de item em estoque */
							GROUP BY 
								p.nome
							ORDER BY 
								TotalSaida DESC;			


	CONSULTA DE FLUXO DE CAIXA 

		Informacoes relacionadas a entrada e saidas de caixa,
		movimentacao financeira e custos operacionais podem ser obtidos em pesquisas na tabela fluxoCaixa 
		e tambem as vezes pode precisar do relacionamento da tabela fluxoCaixaItem

			Exemplo SQL 1
				Quais são os custos operacionais mais significativos?
				#SQL:  SELECT 
							tipo AS TipoDespesa,
							SUM(valor) AS TotalDespesas
						FROM 
							fluxoCaixa
						WHERE tipo = 'S'  
							AND fluxoCaixa.ativo = 1 
						GROUP BY 
							tipo
						ORDER BY 
							TotalDespesas DESC;

			Exemplo SQL 2 
				#user_request_or_question: "Em que dia deste mes foi pago a tv por assinatura ?"
				#SQL: SELECT 
						DAY(fc.dataHora) AS DiaPagamento
						FROM 
							fluxoCaixa fc
						JOIN 
							fluxoCaixaItem fci ON fc.id_fluxoCaixa = fci.id_fluxoCaixa
						WHERE fci.descricao LIKE '%tv por assinatura%'
							AND MONTH(fc.dataHora) = MONTH(CURRENT_DATE())
							AND YEAR(fc.dataHora) = YEAR(CURRENT_DATE())
							AND fc.ativo = 1
						ORDER BY 			


	CONSULTA DE SERVICOS 

		Todos os servicos oferecidos pelo estabelecimento estao registrados na tabela de especialidade.
		Nesta tabela contem informacoes como descricao, precos, tempo necessario, 
		sessoes necessarias para serem feitos os serviço. 

			Exemplo SQL 1
				#user_request_or_question: "Encontrar o valor do servico cujo nome  é 'Corte Masculino'" 
				#SQL: select preco from especialidade where nome like 'corte masculino%';

			Exemplo SQL 2 
				#user_request_or_question: "Qual é o serviço mais demandado pelos clientes?"
				#SQL: SELECT nome, COUNT(*) as quantidade  
							FROM especialidade 
								INNER JOIN agendaEspecialidade
										ON especialidade.id_especialidade = agendaEspecialidade.id_especialidade 
							WHERE especialidade.ativo = 1 		
							GROUP BY especialidade.nome 
							ORDER BY quantidade DESC LIMIT 1 ;

			Exemplo 3 								
				#user_request_or_question: "Quais são os serviços menos procurados pelos clientes?"
				#SQL: SELECT nome, COUNT(*) as quantidade  
						FROM especialidade 
							INNER JOIN agendaEspecialidade
									ON especialidade.id_especialidade = agendaEspecialidade.id_especialidade 
						WHERE especialidade.ativo = 1 		
						GROUP BY especialidade.nome 
						ORDER BY quantidade LIMIT 10 ;


	CONSULTA SE TAXA DE OCUPAÇÃO MÉDIA DE FUNCIONÁRIOS ESPECIALIZADOS NOS ATENDIMENTOS DO ESTABELECIMENTO

		Para se saber o tempo de ocupacao ou ociosidade de um funcionario, 
		relacionar a tabela funcionario com o de agendamento 

			Exemplo SQL 1
				#user_request_or_question: "Qual é a taxa de ocupação diária dos funcionários ao longo da semana?"
				#SQL: SELECT 
						f.nome AS NomeFuncionario,
						COALESCE(AVG(ocupacao_diaria), 0) AS TaxaOcupacaoMedia
						FROM 
							funcionario f
						LEFT JOIN (
							SELECT 
								id_funcionario,
								ROUND(SUM(TIMESTAMPDIFF(MINUTE, dataHoraInicio, dataHoraFim)) / 4200 * 100, 2) AS ocupacao_diaria
							FROM 
								agenda
							WHERE 
								ativo = 1
							GROUP BY 
								id_funcionario, DATE(dataHoraInicio)
						) a ON f.id_funcionario = a.id_funcionario
						GROUP BY 
							f.nome;

			Exemplo SQL 2 
				#user_request_or_question: "Qual é a taxa de ocupação média dos funcionários ao longo da semana?"
				#SQL:  SELECT f.nome AS NomeFuncionario,
								AVG(IF(WEEKDAY(a.dataHoraInicio) = 1, 1, 0)) AS TaxaOcupacaoMediaDomingo,
								AVG(IF(WEEKDAY(a.dataHoraInicio) = 2, 1, 0)) AS TaxaOcupacaoMediaSegunda,
								AVG(IF(WEEKDAY(a.dataHoraInicio) = 3, 1, 0)) AS TaxaOcupacaoMediaTerca,
								AVG(IF(WEEKDAY(a.dataHoraInicio) = 4, 1, 0)) AS TaxaOcupacaoMediaQuarta,
								AVG(IF(WEEKDAY(a.dataHoraInicio) = 5, 1, 0)) AS TaxaOcupacaoMediaQuinta,
								AVG(IF(WEEKDAY(a.dataHoraInicio) = 6, 1, 0)) AS TaxaOcupacaoMediaSexta,
								AVG(IF(WEEKDAY(a.dataHoraInicio) = 7, 1, 0)) AS TaxaOcupacaoMediaSabado
							FROM funcionario f
							LEFT JOIN (
							SELECT
								dataHoraInicio,
								id_funcionario,
								WEEKDAY(dataHoraInicio) AS diaSemana
							FROM agenda a
							WHERE MONTH(dataHoraInicio) = MONTH(CURRENT_DATE())
								AND YEAR(dataHoraInicio) = YEAR(CURRENT_DATE())
							) a ON f.id_funcionario = a.id_funcionario
							GROUP BY f.nome;

	CONSULTA HORÁRIO DE PICO 

		Exemplo SQL 
			#user_request_or_question:"Quais são os horários de pico para cada tipo de serviço?" 
			#SQL: SELECT 
						ae.id_especialidade,
						e.nome AS Especialidade,
						DATE_FORMAT(a.dataHoraInicio, '%H:%i') AS HorarioPico,
						COUNT(*) AS QuantidadeAgendamentos
					FROM 
						agenda a
					JOIN 
						agendaEspecialidade ae ON a.id_agenda = ae.id_agenda
					JOIN 
						especialidade e ON ae.id_especialidade = e.id_especialidade
					WHERE 
						a.ativo = 1
					GROUP BY 
						ae.id_especialidade, DATE_FORMAT(a.dataHoraInicio, '%H:%i')
					ORDER BY 
						ae.id_especialidade, QuantidadeAgendamentos DESC;


	INFORMAÇÕES NÃO CONTEMPLADAS NO APLICATIVO

		Em casos onde se precise de informações em que a estrutura do banco de dados não contemple, 
		devemos retornar a instrução SQL abaixo, 
		com variações na resposta de retorno semelhantes aos Exemplo SQLs abaixo:

			Exemplo SQL 1:
			    #user_request_or_question:"Qual é a taxa de cancelamento ou não comparecimento dos clientes agendados?"
				#SQL: SELECT "Desculpe, mas o gerenciador não possui uma maneira de saber a taxa de cancelamento ou não 
								comparecimento dos clientes agendados" AS retorno;

			Exemplo SQL 2:
				#user_request_or_question: "Como está a satisfação dos clientes em relação aos serviços prestados?"
				#SQL: SELECT "Desculpe, mas não tenho como saber a taxa de satisfação dos clientes, 
								o gerenciador não possui esta informação salva" AS retorno;
